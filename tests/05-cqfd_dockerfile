#!/usr/bin/env bash
#
# validate the behavior of dockerfile

. "$(dirname "$0")/jtest.inc" "$1"
cqfd="$TDIR/.cqfd/cqfd"

cd "$TDIR/" || exit 1

mv -f .cqfd/docker/Dockerfile .cqfd/docker/Dockerfile.orig
mv -f .cqfdrc .cqfdrc.orig

jtest_prepare "cqfd with Dockerfile in project directory set in dockerfile should pass"
echo "FROM ubuntu:16.04" >Dockerfile
sed '/\[build\]/adockerfile="Dockerfile"' .cqfdrc.orig >.cqfdrc
if "$cqfd" init && \
   "$cqfd" run "grep ^PRETTY_NAME /etc/os-release" | grep -qE "Ubuntu 16.04(.[[:digit:]]+)? LTS"; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfd from a subdirectory with Dockerfile in project directory set in dockerfile should pass"
mkdir -p subdir
if "$cqfd" -C subdir run "grep ^PRETTY_NAME /etc/os-release" | grep -qE "Ubuntu 16.04(.[[:digit:]]+)? LTS"; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfd with Dockerfile in a subdirectory of the project directory set in dockerfile should pass"
mkdir -p support/docker
mv Dockerfile support/docker/Dockerfile
sed '/\[build\]/adockerfile="support/docker/Dockerfile"' .cqfdrc.orig >.cqfdrc
if "$cqfd" init && \
   "$cqfd" run "grep ^PRETTY_NAME /etc/os-release" | grep -qE "Ubuntu 16.04(.[[:digit:]]+)? LTS"; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfd from a subdirectory with Dockerfile in a subdirectory of the project directory set in dockerfile should pass"
if "$cqfd" -C subdir run "grep ^PRETTY_NAME /etc/os-release" | grep -qE "Ubuntu 16.04(.[[:digit:]]+)? LTS"; then
	jtest_result pass
else
	jtest_result fail
fi
# cleanup
rm -Rf subdir/ support/

# restore .cqfdrc and Dockerfile
mv -f .cqfdrc.orig .cqfdrc
mv -f .cqfd/docker/Dockerfile.orig .cqfd/docker/Dockerfile

# restore container
if ! "$cqfd" init; then
	jtest_log error "restore container failed"
fi
