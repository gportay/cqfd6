#!/usr/bin/env bash
#
# validate the behavior of release command

set -o pipefail

. "$(dirname "$0")/jtest.inc" "$1"
cqfd="$TDIR/.cqfd/cqfd"

cd "$TDIR/" || exit 1

################################################################################
# The first invocation has no 'files' parameter defined,
# hence it should fail
################################################################################
jtest_prepare "cqfd release fails without files parameter"
if ! "$cqfd" release; then
	jtest_result pass
else
	jtest_result fail
fi

################################################################################
# Adding a files section should help
################################################################################
rel_files="a/cqfd_a.txt a/b/c/cqfd_c.txt a/b/cqfd_b.txt"
cp -f .cqfdrc .cqfdrc.orig
echo "files=\"$rel_files\"" >>.cqfdrc
jtest_prepare "cqfd release now with a files parameter"
if "$cqfd" release; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "default orgname-project.tar.xz archive is generated"
if tar tf cqfd-test.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi

################################################################################
# cqfd packs files at the archive root, whatever their original place,
# only if tar_transform=yes
################################################################################
jtest_prepare "archived files NOT at root of tar archive"
result="pass"
for f in $rel_files; do
	if ! tar tf cqfd-test.tar.xz | grep -q "^$f$"; then
		result="fail"
	fi
done
jtest_result "$result"
rm -f cqfd-test.tar.xz

# now use tar_transform=no
jtest_prepare "archived files NOT at root of tar archive if tar_transform=no"
echo "tar_transform=no" >>.cqfdrc
if "$cqfd" release; then
	result="pass"
else
	result="fail"
fi
for f in $rel_files; do
	if ! tar tf cqfd-test.tar.xz | grep -q "^$f$"; then
		result="fail"
	fi
done
jtest_result "$result"
sed -i -e '$ s!^tar_transform=.*$!!' .cqfdrc
rm -f cqfd-test.tar.xz

# now use tar_transform=yes
jtest_prepare "archived files at root of tar archive if tar_transform=yes"
echo "tar_transform=yes" >>.cqfdrc
if "$cqfd" release; then
	result="pass"
else
	result="fail"
fi
for f in $rel_files; do
	if ! tar tf cqfd-test.tar.xz | grep -q "^$(basename "$f")$"; then
		result="fail"
	fi
done
jtest_result "$result"
sed -i -e '$ s!^tar_transform=.*$!!' .cqfdrc
rm -f cqfd-test.tar.xz

################################################################################
# cqfd follows the symlinks of the files, only if tar_options=-h,
# only for tar archive.
################################################################################
jtest_prepare "symlink files are copied in the tar archive"
result="pass"
if ! "$cqfd" run ln -s a/cqfd_a.txt link.txt; then
	jtest_log fatal "cqfd run failed"
	result="fail"
fi
rel_files_link="a/cqfd_a.txt link.txt"
sed -i '/files=/d' .cqfdrc
echo "files=\"$rel_files_link\"" >>.cqfdrc
echo "tar_options=-h" >>.cqfdrc

if ! "$cqfd" release; then
	jtest_log fatal "cqfd release failed"
	result="fail"
fi
mkdir "$TDIR/output"
if ! tar xf cqfd-test.tar.xz -C "$TDIR/output"; then
	jtest_log fatal "tar failed"
	result="fail"
fi
if [ -L "$TDIR/output/link.txt" ] || ! diff "$TDIR/output/a/cqfd_a.txt" "$TDIR/output/link.txt"; then
	jtest_log fatal "link.txt is not a symlink or differs from cqfd_a.txt"
	result="fail"
fi
jtest_result "$result"

# revert the changes in .cqfdrc file
rm -f link.txt
sed -i '/tar_options=/d' .cqfdrc
sed -i '/files=/d' .cqfdrc
echo "files=\"$rel_files\"" >>.cqfdrc

# cleanup
rm -f cqfd-test.tar.xz
rm -rf "$TDIR/output"

################################################################################
# Now test adding an archive filename template to the config
################################################################################
jtest_prepare "build.archive can template filenames (RFC3339 date)"
export CTEST=foobar
d3="$(date --rfc-3339='date')"
# shellcheck disable=SC2016
echo 'archive=cqfd-%D3-$CTEST.tar.xz' >>.cqfdrc
if "$cqfd" release && tar tf "cqfd-$d3-foobar.tar.xz" &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f "cqfd-$d3-foobar.tar.xz"

jtest_prepare "build.archive can template filenames (git short hash of last commit)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%Gh-$CTEST.tar.xz!' .cqfdrc
# shellcheck disable=SC2010
if "$cqfd" release &&
   ls -1 cqfd-*-foobar.tar.xz | grep -qE "^cqfd-([[:xdigit:]]{4,40}|unset)-foobar.tar.xz$" &&
   tar tf cqfd-*-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-*-foobar.tar.xz

jtest_prepare "build.archive can template filenames (git long hash of last commit)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%GH-$CTEST.tar.xz!' .cqfdrc
# shellcheck disable=SC2010
if "$cqfd" release &&
   ls -1 cqfd-*-foobar.tar.xz | grep -qE "^cqfd-([[:xdigit:]]{40}|unset)-foobar.tar.xz$" &&
   tar tf cqfd-*-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-*-foobar.tar.xz

jtest_prepare "build.archive can template filenames (Unix timestamp)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%Du-$CTEST.tar.xz!' .cqfdrc
# shellcheck disable=SC2010
if "$cqfd" release &&
   ls -1 cqfd-*-foobar.tar.xz | grep -q "^cqfd-[[:digit:]]\{1,20\}-foobar.tar.xz$" &&
   tar tf cqfd-*-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-*-foobar.tar.xz

jtest_prepare "build.archive can template filenames (current cqfd flavor name unset)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%Cf-$CTEST.tar.xz!' .cqfdrc
if "$cqfd" release && tar tf cqfd--foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd--foobar.tar.xz

jtest_prepare "build.archive can template filenames (current cqfd flavor name set)"
if "$cqfd" -b foo release && tar tf cqfd-foo.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-foo.tar.xz

jtest_prepare "build.archive can template filenames (value of the project.org configuration key)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%Po-$CTEST.tar.xz!' .cqfdrc
if "$cqfd" release && tar tf cqfd-cqfd-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-cqfd-foobar.tar.xz

jtest_prepare "build.archive can template filenames (value of the project.name configuration key)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*$!archive=cqfd-%Pn-$CTEST.tar.xz!' .cqfdrc
if "$cqfd" release && tar tf cqfd-test-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-test-foobar.tar.xz

jtest_prepare "build.archive can template filenames (litteral '%' sign)"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*!archive=cqfd-%%-$CTEST.tar.xz!' .cqfdrc
if "$cqfd" release && tar tf cqfd-%-foobar.tar.xz &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f cqfd-%-foobar.tar.xz

################################################################################
# Now test generation of .tar.gz archives
################################################################################
jtest_prepare "build.archive can make a .tar.gz archive"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*xz$!archive=cqfd-$CTEST.tar.gz!' .cqfdrc
if "$cqfd" release && tar ztf "cqfd-$CTEST.tar.gz" &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f "cqfd-$CTEST.tar.gz"

################################################################################
# Now test generation of .zip archives
################################################################################
jtest_prepare "build.archive can make a .zip archive"
# shellcheck disable=SC2016
sed -i -e '$ s!^archive=.*gz$!archive=cqfd-$CTEST.zip!' .cqfdrc
if "$cqfd" release && unzip -l "cqfd-$CTEST.zip" &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f "cqfd-$CTEST.zip"

################################################################################
# Now test releasing a flavor
################################################################################
for flav in foo bar; do
	filename="cqfd-$flav.tar.xz"
	jtest_prepare "release for flavor $flav creates $filename"

	"$cqfd" -b "$flav" release
	if tar tf "$filename" &>/dev/null; then
		jtest_result pass
	else
		jtest_result fail
	fi
	rm -f "$filename"
done

################################################################################
# Using a non-existing file/dir in files= should fail
################################################################################
jtest_prepare "cqfd fails on missing file in build.files"
sed -i -e 's!^files=.*$!files="ThisFileDoesNotExist.txt"!' .cqfdrc
if ! "$cqfd" release; then
	jtest_result pass
else
	jtest_result fail
fi

################################################################################
# Now test usage of globs in the file= parameter
################################################################################
jtest_prepare "cqfd resolves globs in build.files"
# shellcheck disable=SC2016
sed -i -e 's!^archive=.*$!archive=cqfd-$CTEST.tar.xz!' .cqfdrc
sed -i -e 's!^files=.*$!files=".cq*rc Ma*"!' .cqfdrc
# cqfd release must work without error
if "$cqfd" release; then
	jtest_result pass
else
	jtest_result fail
fi

# the generated archive should contain our expanded globs
jtest_prepare "resolved globs are properly archived"
tar tf "cqfd-$CTEST.tar.xz" >"tmp.$$"
if ! grep -q '^.cqfdrc$' "tmp.$$" ||
   ! grep -q '^Makefile$' "tmp.$$"; then
	jtest_result fail
else
	jtest_result pass
fi
rm -f "cqfd-$CTEST.tar.xz"
rm -f "tmp.$$"

################################################################################
# Using option --release should succeed
################################################################################
# shellcheck disable=SC2016
sed -i -e 's!^archive=.*$!archive=cqfd-$CTEST.tar.xz!' .cqfdrc
sed -i -e 's!^files=.*$!files=".cqfd/cqfd"!' .cqfdrc
jtest_prepare "cqfd release with option --release"
if "$cqfd" --release; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "default orgname-project.tar archive is generated"
if tar tf "cqfd-$CTEST.tar.xz" &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi
rm -f "cqfd-$CTEST.tar.xz"

# restore initial .cqfdrc
mv -f .cqfdrc.orig .cqfdrc
