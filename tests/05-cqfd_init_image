#!/usr/bin/env bash
#
# validate the behavior of cqfd with image

set -o pipefail

. "$(dirname "$0")/jtest.inc" "$1"
cqfd="$TDIR/.cqfd/cqfd"
read -r -a cqfd_docker <<<"${CQFD_DOCKER:-docker}"
if [ "$CQFD_RUN_WITH_SUDO" = true ]; then
	cqfd_docker=(sudo "${cqfd_docker[@]}")
fi

cd "$TDIR/" || exit 1

mv -f .cqfd/docker/Dockerfile .cqfd/docker/Dockerfile.orig
cp -f .cqfdrc .cqfdrc.orig
cp -f cqfdrc-image .cqfdrc

################################################################################
# 'cqfd init' pulls image
################################################################################
image="ubuntu:16.04"
sed -i -e "s!^image=.*\$!image='$image'!" .cqfdrc
if "${cqfd_docker[@]}" inspect "$image" &>/dev/null; then
	jtest_log info "${cqfd_docker[-1]} registry contains image named: $image, removing..."
	"${cqfd_docker[@]}" rmi "$image"
fi

jtest_prepare "cqfd init pulls image $image from registry"
if "$cqfd" init && \
   "${cqfd_docker[@]}" inspect "$image" &>/dev/null; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfd runs pulled image $image from registry"
if "$cqfd" | grep -qE "Ubuntu 16.04(.[[:digit:]]+)? LTS"; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfd init with CQFD_EXTRA_PULL_ARGS"
if CQFD_EXTRA_BUILD_ARGS="--disable-content-trust=false" "$cqfd" init; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "run cqfd with docker_pull_args in config"
sed '/\[build\]/adocker_build_args="--disable-content-trust=false"' .cqfdrc
if "$cqfd" init; then
	jtest_result pass
else
	jtest_result fail
fi

################################################################################
# Restore initial .cqfdrc and Dockerfile
################################################################################
mv -f .cqfdrc.orig .cqfdrc
mv -f .cqfd/docker/Dockerfile.orig .cqfd/docker/Dockerfile
